// src/widgets/MiniDialog/MiniDialogView.tsx
"use client";

import {
  Button,
  VStack,
  Box,
  IconButton,
  Dialog,
  Input, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Chakra Input
  Textarea, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Chakra Textarea
  HStack,
  Field, // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º –≤ v3
} from "@chakra-ui/react";
import { motion, AnimatePresence } from "framer-motion";
import { RxCross1 } from "react-icons/rx";
import { type UseFormReturn } from "react-hook-form";
import { type FormValues } from "./useMiniDialog"; // (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ useMiniDialog.ts –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

interface MiniDialogViewProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  form: UseFormReturn<FormValues>;
  onSubmit: (data: FormValues) => void;
  currentStep: number;
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è Framer Motion
const variants = {
  initial: { opacity: 0, x: 30 },
  animate: { opacity: 1, x: 0 },
  exit: { opacity: 0, x: -30 },
  transition: { duration: 0.24 },
};

export function MiniDialogView({
  isOpen,
  onOpenChange,
  form,
  onSubmit,
  currentStep,
}: MiniDialogViewProps) {
  const {
    register,
    handleSubmit,
    formState: { isSubmitting },
  } = form;

  return (
    <>
      <Button onClick={() => onOpenChange(true)}>–û—Ç–∫—Ä—ã—Ç—å –ú–∏–Ω–∏-–î–∏–∞–ª–æ–≥</Button>

      <Dialog.Root open={isOpen}>
        <Dialog.Backdrop />
        <Dialog.Positioner>
          <Dialog.Content maxW="500px" p={6}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              mb={4}
            >
              <Dialog.Title as="h3" fontWeight="bold" fontSize="lg">
                {currentStep === 1
                  ? "–®–∞–≥ 1: –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"
                  : "–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞"}
              </Dialog.Title>
              <IconButton
                aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                onClick={() => onOpenChange(false)}
                size="sm"
                variant="ghost"
              >
                <RxCross1 />
              </IconButton>
            </Box>

            {/* –ï–î–ò–ù–´–ô –¢–ï–ì <form> */}
            <form onSubmit={handleSubmit(onSubmit)}>
              <AnimatePresence mode="wait">
                {currentStep === 1 ? (
                  // --- –®–ê–ì 1: –ü–æ–ª—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ ---
                  <motion.div
                    key="step1"
                    initial={variants.initial}
                    animate={variants.animate}
                    exit={variants.exit}
                    transition={variants.transition}
                  >
                    <Dialog.Body>
                      <VStack gap={4}>
                        <Field.Root>
                          <Field.Label>–ò–º—è</Field.Label>
                          {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º Chakra Input –Ω–∞–ø—Ä—è–º—É—é */}
                          <Input
                            placeholder="–ò–≤–∞–Ω"
                            {...register("firstName", { required: true })}
                          />
                        </Field.Root>

                        <Field.Root>
                          <Field.Label>–§–∞–º–∏–ª–∏—è</Field.Label>
                          {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º Chakra Input –Ω–∞–ø—Ä—è–º—É—é */}
                          <Input
                            placeholder="–ò–≤–∞–Ω–æ–≤"
                            {...register("lastName", { required: true })}
                          />
                        </Field.Root>
                      </VStack>
                    </Dialog.Body>
                    <Dialog.Footer mt={6}>
                      <Button
                        w="100%"
                        colorPalette="teal"
                        type="submit" // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                        disabled={isSubmitting}
                      >
                        {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–î–∞–ª–µ–µ"}
                      </Button>
                    </Dialog.Footer>
                  </motion.div>
                ) : (
                  // --- –®–ê–ì 2: –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏—ë–º–∞ –∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
                  <motion.div
                    key="step2"
                    initial={variants.initial}
                    animate={variants.animate}
                    exit={variants.exit}
                    transition={variants.transition}
                  >
                    <Dialog.Body>
                      <Field.Root>
                        <Field.Label>–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–∏—ë–º–∞</Field.Label>
                        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º Chakra Textarea –Ω–∞–ø—Ä—è–º—É—é */}
                        <Textarea
                          placeholder="–ñ–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                          {...register("appointmentNotes")}
                        />
                      </Field.Root>
                    </Dialog.Body>
                    <Dialog.Footer mt={6}>
                      <HStack w="100%">
                        <Button
                          variant="ghost"
                          type="button" // üëà –ö–õ–Æ–ß–ï–í–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É
                          onClick={() => onOpenChange(false)}
                        >
                          –ó–∞–∫—Ä—ã—Ç—å
                        </Button>
                        <Button
                          flex={1}
                          colorPalette="teal"
                          type="submit" // üëà –ö–õ–Æ–ß–ï–í–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç
                          disabled={isSubmitting}
                        >
                          {isSubmitting ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–µ–º"}
                        </Button>
                      </HStack>
                    </Dialog.Footer>
                  </motion.div>
                )}
              </AnimatePresence>
            </form>
          </Dialog.Content>
        </Dialog.Positioner>
      </Dialog.Root>
    </>
  );
}
